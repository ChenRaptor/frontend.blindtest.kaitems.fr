name: Build

on:
  push:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Packages
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.TOKEN }}

      - name: Prepare metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          build-args: |
            APP_RELEASE=${{ github.sha }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Update app on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            WEB_DIR="/var/www/vhosts/kaitems/app/blindtest.kaitems.fr/httpdocs"
            REPO_URL="git@github.com:ChenRaptor/blindtest.kaitems.fr.git"
            BRANCH="main"
            PROJECT_NAME="blindtest_kaitems"
            mkdir -p "$WEB_DIR"
            cd "$WEB_DIR"
            if [ "$(docker ps -q -f name=${PROJECT_NAME})" ]; then
              docker compose -p $PROJECT_NAME down
              git pull origin "$BRANCH"
            else
              if [ -d ".git" ]; then
                git pull origin "$BRANCH"
              else
                git clone "$REPO_URL" .
              fi
            fi
            docker compose pull $IMAGE_NAME
            docker compose -p $PROJECT_NAME up -d --build